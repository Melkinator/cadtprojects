// Check if a specific locker is available
bool isLockerAvailable(User users[], int count, int locker_id) {
    for (int i = 0; i < count; i++) {
        if (users[i].locker.locker_id == locker_id && users[i].locker.is_available == false) {
            return false; // Locker is already assigned
        }
    }
    return true; // Locker is available
}

// Assign a locker to a user
void assignLocker(User users[], int count) {
    if (count == 0) {
        printf("\nNo users registered. Please register a user first.");
        return;
    }
    
    printf("\n===== Assign Locker =====");
    
    // Display all users
    printf("\nAvailable Users:");
    for (int i = 0; i < count; i++) {
        printf("\n%d. %s (ID: %d)", i, users[i].name, users[i].id);
        if (users[i].locker.locker_id != 0) {
            printf(" - Already has locker %d", users[i].locker.locker_id);
        }
    }
    
    int userChoice;
    printf("\nSelect user (0-%d): ", count - 1);
    scanf("%d", &userChoice);
    
    if (userChoice < 0 || userChoice >= count) {
        printf("\nInvalid user selection.");
        return;
    }
    
    // Check if user already has a locker
    if (users[userChoice].locker.locker_id != 0 && users[userChoice].locker.is_available == false) {
        printf("\nUser %s already has locker %d assigned.", 
               users[userChoice].name, users[userChoice].locker.locker_id);
        return;
    }
    
    int lockerId;
    printf("\nEnter locker ID to assign: ");
    scanf("%d", &lockerId);
    
    if (isLockerAvailable(users, count, lockerId)) {
        users[userChoice].locker.locker_id = lockerId;
        users[userChoice].locker.is_available = false;
        strcpy(users[userChoice].locker.condition, "Good");
        
        printf("\nLocker %d successfully assigned to %s.", lockerId, users[userChoice].name);
    } else {
        printf("\nLocker %d is already assigned to another user.", lockerId);
    }
}

// Return/Change locker for a user
void returnLocker(User users[], int count) {
    if (count == 0) {
        printf("\nNo users registered.");
        return;
    }
    
    printf("\n===== Return/Change Locker =====");
    
    // Display users with lockers
    printf("\nUsers with assigned lockers:");
    bool hasLockers = false;
    for (int i = 0; i < count; i++) {
        if (users[i].locker.locker_id != 0 && users[i].locker.is_available == false) {
            printf("\n%d. %s (ID: %d) - Locker %d", 
                   i, users[i].name, users[i].id, users[i].locker.locker_id);
            hasLockers = true;
        }
    }
    
    if (!hasLockers) {
        printf("\nNo users have assigned lockers.");
        return;
    }
    
    int userChoice;
    printf("\nSelect user: ");
    scanf("%d", &userChoice);
    
    if (userChoice < 0 || userChoice >= count) {
        printf("\nInvalid user selection.");
        return;
    }
    
    if (users[userChoice].locker.locker_id == 0 || users[userChoice].locker.is_available == true) {
        printf("\nUser %s doesn't have a locker assigned.", users[userChoice].name);
        return;
    }
    
    printf("\n1. Return locker");
    printf("\n2. Change locker");
    printf("\nChoose option: ");
    
    int option;
    scanf("%d", &option);
    
    if (option == 1) {
        // Return locker
        printf("\nLocker %d returned by %s.", users[userChoice].locker.locker_id, users[userChoice].name);
        users[userChoice].locker.locker_id = 0;
        users[userChoice].locker.is_available = true;
        strcpy(users[userChoice].locker.condition, "");
    } else if (option == 2) {
        // Change locker
        int newLockerId;
        printf("\nEnter new locker ID: ");
        scanf("%d", &newLockerId);
        
        if (isLockerAvailable(users, count, newLockerId)) {
            int oldLockerId = users[userChoice].locker.locker_id;
            users[userChoice].locker.locker_id = newLockerId;
            strcpy(users[userChoice].locker.condition, "Good");
            
            printf("\nLocker changed from %d to %d for %s.", oldLockerId, newLockerId, users[userChoice].name);
        } else {
            printf("\nLocker %d is already assigned to another user.", newLockerId);
        }
    } else {
        printf("\nInvalid option.");
    }
}

// View all locker status
void viewLockerStatus(User users[], int count) {
    printf("\n===== Locker Status =====");
    
    if (count == 0) {
        printf("\nNo users registered.");
        return;
    }
    
    printf("\n%-10s %-20s %-15s %-10s", "Locker ID", "User Name", "User ID", "Condition");
    printf("\n%s", "----------------------------------------------------------------");
    
    bool hasAssignedLockers = false;
    for (int i = 0; i < count; i++) {
        if (users[i].locker.locker_id != 0 && users[i].locker.is_available == false) {
            printf("\n%-10d %-20s %-15d %-10s", 
                   users[i].locker.locker_id, 
                   users[i].name, 
                   users[i].id, 
                   users[i].locker.condition);
            hasAssignedLockers = true;
        }
    }
    
    if (!hasAssignedLockers) {
        printf("\nNo lockers are currently assigned.");
    }
}

// View locker by specific user ID
void viewLockerByStudent(User users[], int count, char *id) {
    int userId = atoi(id); // Convert string to integer
    
    printf("\n===== Locker Information for User ID: %s =====", id);
    
    bool userFound = false;
    for (int i = 0; i < count; i++) {
        if (users[i].id == userId) {
            userFound = true;
            printf("\nUser: %s (ID: %d)", users[i].name, users[i].id);
            
            if (users[i].locker.locker_id != 0 && users[i].locker.is_available == false) {
                printf("\nLocker ID: %d", users[i].locker.locker_id);
                printf("\nCondition: %s", users[i].locker.condition);
                printf("\nStatus: Assigned");
            } else {
                printf("\nNo locker assigned to this user.");
            }
            break;
        }
    }
    
    if (!userFound) {
        printf("\nUser with ID %s not found.", id);
    }
}

// Alternative version that takes int instead of char*
void viewLockerByUserId(User users[], int count, int userId) {
    printf("\n===== Locker Information for User ID: %d =====", userId);
    
    bool userFound = false;
    for (int i = 0; i < count; i++) {
        
        if (users[i].id == userId) {
            userFound = true;
            printf("\nUser: %s (ID: %d)", users[i].name, users[i].id);
            
            if (users[i].locker.locker_id != 0 && users[i].locker.is_available == false) {
                printf("\nLocker ID: %d", users[i].locker.locker_id);
                printf("\nCondition: %s", users[i].locker.condition);
                printf("\nStatus: Assigned");
            } else {
                printf("\nNo locker assigned to this user.");
            }
            break;
        }
    }
    
    if (!userFound) {
        printf("\nUser with ID %d not found.", userId);
    }
}
